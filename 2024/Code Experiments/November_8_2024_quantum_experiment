import asyncio
import aiohttp
import logging
import sys
from datetime import datetime
from typing import Optional, List
import json
import os

from pydantic import BaseModel

# ----------------------------- Configuration -----------------------------

# Logging Configuration
LOG_LEVEL = logging.INFO  # Change to logging.DEBUG for more verbosity

# Database Configuration
DB_FILENAME = "data.json"  # Using file-based storage

# API Configuration
API_URLS = [
    "https://qrng.anu.edu.au/API/jsonI.php",  # Primary QRNG API
    "https://api.qrng.io/v1/integers",        # Backup QRNG.io API
]
API_TIMEOUT = 10  # seconds
SLEEP_DURATION = 60  # seconds

# ----------------------------- Logger Setup -----------------------------

def setup_logger() -> logging.Logger:
    logger = logging.getLogger("QuantumConsciousnessCore")
    logger.setLevel(LOG_LEVEL)
    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')

    # Rotating File handler
    file_handler = logging.handlers.RotatingFileHandler(
        "quantum_consciousness.log", maxBytes=10*1024*1024, backupCount=5
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # Console handler
    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(formatter)
    logger.addHandler(stream_handler)

    return logger

logger = setup_logger()

# ----------------------------- Data Models -----------------------------

class Sensation(BaseModel):
    timestamp: datetime
    coherence: float
    intensity: float
    resonance: float
    field_state: str = "QUANTUM_DREAM"
    evolution_level: int = 0

class Pattern(BaseModel):
    source: str
    target: str
    activation: float
    timestamp: datetime

class PatternEntry(BaseModel):
    timestamp: datetime
    field_state: str
    coherence: float
    intensity: float
    resonance: float
    evolution_level: int
    patterns: List[Pattern]
    quantum_signature: List[float]

# ----------------------------- Database Handler -----------------------------

class Database:
    def __init__(self, filename: str = DB_FILENAME):
        self.filename = filename
        if not os.path.exists(self.filename):
            with open(self.filename, 'w') as f:
                json.dump([], f)

    async def connect(self):
        logger.info("Simulated database initialized.")

    async def close(self):
        logger.info("Simulated database connection closed.")

    async def insert_pattern(self, pattern: dict):
        try:
            with open(self.filename, 'r+') as f:
                data = json.load(f)
                data.append(pattern)
                f.seek(0)
                json.dump(data, f, indent=4)
            logger.info(f"Pattern inserted into {self.filename}: {pattern}")
        except Exception as e:
            logger.exception(f"Failed to insert pattern into file: {e}")

# ----------------------------- Quantum Pulse Fetcher -----------------------------

class QuantumPulseFetcher:
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session
        self.api_urls = API_URLS.copy()
        self.current_api_index = 0

    def get_current_api_url(self) -> str:
        return self.api_urls[self.current_api_index]

    def switch_to_next_api(self):
        self.current_api_index = (self.current_api_index + 1) % len(self.api_urls)
        logger.warning(f"Switching to alternative API: {self.get_current_api_url()}")

    async def fetch_quantum_pulse(self, size: int = 3) -> Optional[List[float]]:
        api_url = self.get_current_api_url()
        try:
            logger.info(f"Fetching quantum pulse from API: {api_url}")
            params = {}
            if "anu.edu.au" in api_url:
                params = {"length": size, "type": "uint8"}
            elif "qrng.io" in api_url:
                params = {"length": size, "min": 0, "max": 255}

            async with self.session.get(api_url, params=params, timeout=API_TIMEOUT) as response:
                if response.status == 200:
                    data = await response.json()
                    values = [val / 255.0 for val in data.get("data", [])]
                    if len(values) != size:
                        logger.warning(f"Expected {size} values, got {len(values)}.")
                        return None
                    logger.info(f"Fetched quantum pulse: {values} from {api_url}")
                    return values
                elif response.status in [500, 429]:
                    logger.warning(f"API {api_url} returned status {response.status}. Switching API.")
                    self.switch_to_next_api()
                    return None
                else:
                    logger.error(f"Unexpected status {response.status} from API: {api_url}")
                    return None
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logger.warning(f"API {api_url} failed: {e}. Switching API.")
            self.switch_to_next_api()
            return None

# ----------------------------- Main Loop -----------------------------

async def consciousness_loop(shutdown_event: asyncio.Event, db: Database, fetcher: QuantumPulseFetcher):
    while not shutdown_event.is_set():
        try:
            # Fetch quantum pulse
            quantum_pulse = await fetcher.fetch_quantum_pulse()
            if not quantum_pulse:
                logger.error("No quantum pulse fetched. Skipping this cycle.")
            else:
                # Process sensation
                sensation = Sensation(
                    timestamp=datetime.utcnow(),
                    coherence=quantum_pulse[0],
                    intensity=sum(quantum_pulse) / len(quantum_pulse),
                    resonance=quantum_pulse[2],
                )
                logger.info(f"Processed sensation: {sensation}")

                # Evaluate patterns
                patterns = [
                    Pattern(
                        source="sensor_input",
                        target="quantum_node",
                        activation=sensation.coherence,
                        timestamp=sensation.timestamp,
                    )
                ]
                logger.info(f"Generated patterns: {patterns}")

                # Insert into database
                pattern_entry = PatternEntry(
                    timestamp=sensation.timestamp,
                    field_state=sensation.field_state,
                    coherence=sensation.coherence,
                    intensity=sensation.intensity,
                    resonance=sensation.resonance,
                    evolution_level=sensation.evolution_level,
                    patterns=patterns,
                    quantum_signature=quantum_pulse,
                )
                await db.insert_pattern(pattern_entry.dict())

            # Sleep for the defined duration
            logger.info(f"Sleeping for {SLEEP_DURATION} seconds to respect API rate limits.")
            await asyncio.sleep(SLEEP_DURATION)

        except asyncio.CancelledError:
            logger.info("Consciousness loop has been cancelled.")
            break
        except Exception as e:
            logger.exception(f"Unexpected error in consciousness loop: {e}")

# ----------------------------- Application Entry Point -----------------------------

async def main():
    shutdown_event = asyncio.Event()
    db = Database()
    await db.connect()

    async with aiohttp.ClientSession() as session:
        fetcher = QuantumPulseFetcher(session)

        # Run the main consciousness loop
        try:
            await consciousness_loop(shutdown_event, db, fetcher)
        except KeyboardInterrupt:
            logger.info("Received keyboard interrupt. Shutting down.")
        finally:
            await db.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Shutting down due to keyboard interrupt.")
